name: trinocular

networks:
  trinocular_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  nginx_cache:
    driver: local

services:
  postgres:
    image: postgres:17.0-alpine3.20
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: "src/postgres/.env"
    # environment:
    #   POSTGRES_DB: ${POSTGRES_DB}
    #   POSTGRES_USER: ${POSTGRES_USER}
    #   POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    secrets:
      - postgres_secret
    networks:
      - trinocular_network


  keycloak:
    image: quay.io/keycloak/keycloak:26.0.0
    # command: start-dev
    env_file: "src/keycloak/.env"
    entrypoint: 
      - /bin/bash 
      - -c 
      - |
        export KC_DB_PASSWORD=$$(cat /run/secrets/postgres_secret)
        export KEYCLOAK_ADMIN_PASSWORD=$$(cat /run/secrets/keycloak_admin_secret)
        exec /opt/keycloak/bin/kc.sh start-dev
    secrets:
      - postgres_secret
      - keycloak_admin_secret
    # environment:
      # KC_HOSTNAME: localhost
      # KC_HOSTNAME_PORT: 8080
      # KC_HOSTNAME_STRICT_BACKCHANNEL: false
      # KC_HTTP_ENABLED: true
      # KC_HOSTNAME_STRICT_HTTPS: false
      # KC_HEALTH_ENABLED: true
      # KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      # KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      # KC_DB: postgres
      # KC_DB_URL: jdbc:postgresql://postgres/${POSTGRES_DB}
      # KC_DB_USERNAME: ${POSTGRES_USER}
      # KC_DB_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - trinocular_network
    ports:
      - 9000:8080
    restart: always
    depends_on:
      - postgres

  memcached:
    image: memcached:1.6.31-alpine3.20
    container_name: memcached
    networks:
      - trinocular_network
    ports:
        - 11211:11211
    healthcheck:
        test: echo "version" | nc -vn -w 1 127.0.0.1 11211
        interval: 5s
        timeout: 5s
        retries: 5

  nginx:
    image: trinocular-nginx-service
    build:
        context: ./
        dockerfile: ./src/nginx/Dockerfile
    volumes:
      - nginx_cache:/var/cache/nginx
    tmpfs:
      - /run
    networks:
      - trinocular_network
    ports:
      - 8080:8080

  auth:
    image: trinocular-auth-service
    build:
      context: ./
      dockerfile: ./src/auth/Dockerfile
    env_file: "src/auth/.env"
    environment:
      - NODE_ENV=production
    secrets:
      - auth_client_secret
      - session_secret
    networks:
      - trinocular_network
    ports:
      - 8081:80
    healthcheck:
      test: wget --no-verbose --tries=1 --spider  http://auth/ || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - memcached
secrets:
  session_secret:
    file: ./secrets/session.txt
  postgres_secret:
    file: ./secrets/postgres.txt
  auth_client_secret:
    file: ./secrets/auth_client.txt
  keycloak_admin_secret:
    file: ./secrets/keycloak_admin_secret.txt
  